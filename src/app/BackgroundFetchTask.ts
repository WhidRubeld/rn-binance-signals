import { sma, unix2time } from '@helpers'
import { IPair, IResult } from '@interfaces'
import { ApiService, StorageService } from '@services'
import { PairKlinesResult } from '@services/ApiService'
import store from '@store'
import { refreshResults } from '@store/results'
import * as BackgroundFetch from 'expo-background-fetch'
import * as Notifications from 'expo-notifications'
import moment from 'moment-timezone'

interface PromiseFulfilledResult<T> {
  status: 'fulfilled'
  value: T
}

interface PromiseRejectedResult {
  status: 'rejected'
  reason: any
}

type PromiseSettledResult<T> = PromiseFulfilledResult<T> | PromiseRejectedResult

const notificationHandler = (
  results: IResult[],
  pair: IPair,
  values: {
    sma7: number
    sma25: number
  },
  timestamp: number
) => {
  // –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ —Ä–∞–Ω–µ–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
  if (results.length > 0) {
    // –ø–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const last = results[results.length - 1]

    // –ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É —Ç—è–≥–∏ –¥–ª—è –ø—Ä–æ—à–ª–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const latest = (last.sma7 / last.sma25 - 1) * 100
    // –ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É —Ç—è–≥–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const current = (values.sma7 / values.sma25 - 1) * 100

    /**
     * –ü–ï–†–í–´–ô –í–ò–î –ü–£–®–ê
     * 1. MA7 / MA25 - 1 = —Å–∏–ª–∞ —Ç—è–≥–∏
     * 2. –ï—Å–ª–∏ —Å–∏–ª–∞ —Ç—è–≥–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞ => —Ç—Ä–µ–Ω–¥ –Ω–∏—Å—Ö–æ–¥—è—â–∏–π
     * 3. –ï—Å–ª–∏ —Å–∏–ª–∞ —Ç—è–≥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞ => —Ç—Ä–µ–Ω–¥ –≤–æ—Å—Ö–æ–¥—è—â–∏–π
     */

    // –ï—Å–ª–∏ —Å–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –≤–æ—Å—Ö–æ–¥—è—â–∏–π
    const isUpper = current >= 0 && latest < 0
    // –ï—Å–ª–∏ —Å–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –Ω–∏—Å—Ö–æ–¥—è—â–∏–π
    const isLower = current <= 0 && latest > 0

    if (isUpper || isLower) {
      Notifications.scheduleNotificationAsync({
        content: {
          title: `${pair.first} / ${pair.second} - —Å–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞`,
          body: `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${isUpper ? 'üî∫' : 'üîª'}\n–¢—è–≥–∞: ${current.toFixed(
            4
          )}\n–í—Ä–µ–º—è: ${unix2time(timestamp)}`,
        },
        trigger: null,
      })
    }

    /**
     * –í–¢–û–†–û–ô –í–ò–î –ü–£–®–ê
     * –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —É—Ä–æ–≤–Ω–∏ —Å–∏–ª—ã –¥–ª—è –ø–∞—Ä—ã
     * –ï—Å–ª–∏ –ø—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —É—Ä–æ–≤–Ω—è,
     * –∞ —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–æ–¥–æ–ª–µ–ª –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–µ–ª, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—à
     */

    // –ø–æ–ª—É—á–µ–º –Ω–∏–∂–Ω–∏–π –∏ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–Ω–∏ —Å–∏–ª—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—ã
    const { percent } = pair
    const { up, down } = percent

    const lowerStatus = current >= down && latest <= down
    const upperStatus = current <= up && latest >= up

    if (lowerStatus || upperStatus) {
      Notifications.scheduleNotificationAsync({
        content: {
          title: `${pair.first} / ${pair.second} - –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Ä—É–±–µ–∂–∞`,
          body: `–†—É–±–µ–∂: ${lowerStatus ? down : up}\n–¢—è–≥–∞: ${current.toFixed(
            4
          )}\n–í—Ä–µ–º—è: ${unix2time(timestamp)}`,
        },
        trigger: null,
      })
    }
  }
}

const informationProcessingHandler = async (
  res: PromiseSettledResult<PairKlinesResult>[]
) => {
  const info = await StorageService.getResults()

  for (const result of res) {
    // –µ—Å–ª–∏ —Ç–∞—Å–∫ —É—Å–ø–µ—à–µ–Ω
    if (result.status === 'fulfilled') {
      const { result: data, pair, timestamp } = result.value
      const closeValues = data.map((v) => parseFloat(v.close))
      const sma7 = sma(closeValues, 7).pop()
      const sma25 = sma(closeValues, 25).pop()

      const index = info.findIndex((v) => v.pair.uuid === pair.uuid)

      if (sma7 && sma25) {
        if (index !== -1) {
          notificationHandler(
            info[index].results,
            pair,
            { sma7, sma25 },
            timestamp
          )

          info[index].results.push({ sma7, sma25, timestamp })

          if (info[index].results.length > 10) {
            info[index].results = info[index].results.slice(-10)
          }
        } else {
          info.push({
            pair,
            results: [{ sma7, sma25, timestamp }],
          })
        }

        StorageService.setResults(info)
      }
    }
  }
}

export default async function launchBackgroundTask() {
  const pairs = await StorageService.getPairs()

  const results = await Promise.all(
    pairs.map((pair) =>
      ApiService.getPairKlines(pair)
        .then((value) => ({ status: 'fulfilled', value }))
        .catch((reason) => ({ status: 'rejected', reason }))
    )
  )

  await informationProcessingHandler(
    results as PromiseSettledResult<PairKlinesResult>[]
  )

  store.dispatch(refreshResults())
  return BackgroundFetch.Result.NewData
}
